<?php
#############
# phpdescribe
#############

  ###############################################
  # run a simple expectation
  ###############################################
  expect(2)->toBe(2);

  ###############################################
  # should run a test inside a spec
  ###############################################
  // if you use $spec will conflict becouse tests are not isolated.
  $s = new Spec('test');
  $s->set_code('expect(1)->toBe(1);');
  SpecRunner::run($s);
  expect($s->get_result())->toBe(true);

  #############
  #  Error Line
  #############

    #########################################################
    # should show the line of the parser error on the message
    #########################################################

      ############################
      # no blank lines in the code
      ############################
      $s = new Spec('test');
      $s->set_code('
        expect(1)->toBe(1)
        expect(1)->toBe(1);
      ');
      SpecRunner::run($s);
      expect($s->get_message())->toBe('Syntax error on line 3 of the code.');

      ############################
      # code with blank lines
      ############################
      $s = new Spec('test');
      $s->set_code('

        expect(1)->toBe(1)
        expect(1)->toBe(1);
      ');
      SpecRunner::run($s);
      expect($s->get_message())->toBe('Syntax error on line 4 of the code.');

    ##########################################
    # should keep the line of the parser error
    ##########################################
    $s = new Spec('test');
    $s->set_code('
      expect(1)->toBe(1)
      expect(1)->toBe(1);
    ');
    SpecRunner::run($s);
    expect($s->get_error_line())->toBe(3);

    ###############################################
    # should keep the line of the failing test
    ###############################################
    $s = new Spec('test');
    $s->set_code('expect(1)->toBe(2);');
    SpecRunner::run($s);
    expect($s->get_error_line())->toBe(1);
    $s->set_code('expect(1)->toBe(1);
    expect(1)->toBe(1);
    expect(1)->toBe(2);
    ');
    SpecRunner::run($s);
    expect($s->get_error_line())->toBe(3);


    

  ###############################################
  # one test should run in isolation
  ###############################################

    ######################################################
    # variables in one test cannot be seen on another one
    ######################################################

      ###################################
      # declare something
      ###################################
      $a = 10;

      #######################################################
      # verify the var declared on the other test is not set
      #######################################################
      expect(isset($a))->toBe(false);



  
